// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smartredis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smartredis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smartredis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smartredis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smartredis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smartredis_2eproto;
namespace SmartRedisProtobuf {
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class RepeatedDoubleMeta;
class RepeatedDoubleMetaDefaultTypeInternal;
extern RepeatedDoubleMetaDefaultTypeInternal _RepeatedDoubleMeta_default_instance_;
class RepeatedFloatMeta;
class RepeatedFloatMetaDefaultTypeInternal;
extern RepeatedFloatMetaDefaultTypeInternal _RepeatedFloatMeta_default_instance_;
class RepeatedSInt32Meta;
class RepeatedSInt32MetaDefaultTypeInternal;
extern RepeatedSInt32MetaDefaultTypeInternal _RepeatedSInt32Meta_default_instance_;
class RepeatedSInt64Meta;
class RepeatedSInt64MetaDefaultTypeInternal;
extern RepeatedSInt64MetaDefaultTypeInternal _RepeatedSInt64Meta_default_instance_;
class RepeatedStringMeta;
class RepeatedStringMetaDefaultTypeInternal;
extern RepeatedStringMetaDefaultTypeInternal _RepeatedStringMeta_default_instance_;
class RepeatedUInt32Meta;
class RepeatedUInt32MetaDefaultTypeInternal;
extern RepeatedUInt32MetaDefaultTypeInternal _RepeatedUInt32Meta_default_instance_;
class RepeatedUInt64Meta;
class RepeatedUInt64MetaDefaultTypeInternal;
extern RepeatedUInt64MetaDefaultTypeInternal _RepeatedUInt64Meta_default_instance_;
}  // namespace SmartRedisProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartRedisProtobuf::MetaData* Arena::CreateMaybeMessage<::SmartRedisProtobuf::MetaData>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedDoubleMeta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedDoubleMeta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedFloatMeta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedFloatMeta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedSInt32Meta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedSInt32Meta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedSInt64Meta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedSInt64Meta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedStringMeta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedStringMeta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedUInt32Meta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedUInt32Meta>(Arena*);
template<> ::SmartRedisProtobuf::RepeatedUInt64Meta* Arena::CreateMaybeMessage<::SmartRedisProtobuf::RepeatedUInt64Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartRedisProtobuf {

// ===================================================================

class RepeatedStringMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedStringMeta) */ {
 public:
  RepeatedStringMeta();
  virtual ~RepeatedStringMeta();

  RepeatedStringMeta(const RepeatedStringMeta& from);
  RepeatedStringMeta(RepeatedStringMeta&& from) noexcept
    : RepeatedStringMeta() {
    *this = ::std::move(from);
  }

  inline RepeatedStringMeta& operator=(const RepeatedStringMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedStringMeta& operator=(RepeatedStringMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedStringMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedStringMeta* internal_default_instance() {
    return reinterpret_cast<const RepeatedStringMeta*>(
               &_RepeatedStringMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RepeatedStringMeta& a, RepeatedStringMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedStringMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedStringMeta* New() const final {
    return CreateMaybeMessage<RepeatedStringMeta>(nullptr);
  }

  RepeatedStringMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedStringMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedStringMeta& from);
  void MergeFrom(const RepeatedStringMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedStringMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedStringMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedStringMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedDoubleMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedDoubleMeta) */ {
 public:
  RepeatedDoubleMeta();
  virtual ~RepeatedDoubleMeta();

  RepeatedDoubleMeta(const RepeatedDoubleMeta& from);
  RepeatedDoubleMeta(RepeatedDoubleMeta&& from) noexcept
    : RepeatedDoubleMeta() {
    *this = ::std::move(from);
  }

  inline RepeatedDoubleMeta& operator=(const RepeatedDoubleMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedDoubleMeta& operator=(RepeatedDoubleMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedDoubleMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedDoubleMeta* internal_default_instance() {
    return reinterpret_cast<const RepeatedDoubleMeta*>(
               &_RepeatedDoubleMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RepeatedDoubleMeta& a, RepeatedDoubleMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedDoubleMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedDoubleMeta* New() const final {
    return CreateMaybeMessage<RepeatedDoubleMeta>(nullptr);
  }

  RepeatedDoubleMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedDoubleMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedDoubleMeta& from);
  void MergeFrom(const RepeatedDoubleMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedDoubleMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedDoubleMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated double data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedDoubleMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedFloatMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedFloatMeta) */ {
 public:
  RepeatedFloatMeta();
  virtual ~RepeatedFloatMeta();

  RepeatedFloatMeta(const RepeatedFloatMeta& from);
  RepeatedFloatMeta(RepeatedFloatMeta&& from) noexcept
    : RepeatedFloatMeta() {
    *this = ::std::move(from);
  }

  inline RepeatedFloatMeta& operator=(const RepeatedFloatMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedFloatMeta& operator=(RepeatedFloatMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedFloatMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedFloatMeta* internal_default_instance() {
    return reinterpret_cast<const RepeatedFloatMeta*>(
               &_RepeatedFloatMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RepeatedFloatMeta& a, RepeatedFloatMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedFloatMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedFloatMeta* New() const final {
    return CreateMaybeMessage<RepeatedFloatMeta>(nullptr);
  }

  RepeatedFloatMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedFloatMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedFloatMeta& from);
  void MergeFrom(const RepeatedFloatMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedFloatMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedFloatMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated float data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedFloatMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedSInt64Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedSInt64Meta) */ {
 public:
  RepeatedSInt64Meta();
  virtual ~RepeatedSInt64Meta();

  RepeatedSInt64Meta(const RepeatedSInt64Meta& from);
  RepeatedSInt64Meta(RepeatedSInt64Meta&& from) noexcept
    : RepeatedSInt64Meta() {
    *this = ::std::move(from);
  }

  inline RepeatedSInt64Meta& operator=(const RepeatedSInt64Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedSInt64Meta& operator=(RepeatedSInt64Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedSInt64Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedSInt64Meta* internal_default_instance() {
    return reinterpret_cast<const RepeatedSInt64Meta*>(
               &_RepeatedSInt64Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RepeatedSInt64Meta& a, RepeatedSInt64Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedSInt64Meta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedSInt64Meta* New() const final {
    return CreateMaybeMessage<RepeatedSInt64Meta>(nullptr);
  }

  RepeatedSInt64Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedSInt64Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedSInt64Meta& from);
  void MergeFrom(const RepeatedSInt64Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedSInt64Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedSInt64Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated sint64 data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedSInt64Meta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedUInt64Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedUInt64Meta) */ {
 public:
  RepeatedUInt64Meta();
  virtual ~RepeatedUInt64Meta();

  RepeatedUInt64Meta(const RepeatedUInt64Meta& from);
  RepeatedUInt64Meta(RepeatedUInt64Meta&& from) noexcept
    : RepeatedUInt64Meta() {
    *this = ::std::move(from);
  }

  inline RepeatedUInt64Meta& operator=(const RepeatedUInt64Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedUInt64Meta& operator=(RepeatedUInt64Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedUInt64Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedUInt64Meta* internal_default_instance() {
    return reinterpret_cast<const RepeatedUInt64Meta*>(
               &_RepeatedUInt64Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RepeatedUInt64Meta& a, RepeatedUInt64Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedUInt64Meta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedUInt64Meta* New() const final {
    return CreateMaybeMessage<RepeatedUInt64Meta>(nullptr);
  }

  RepeatedUInt64Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedUInt64Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedUInt64Meta& from);
  void MergeFrom(const RepeatedUInt64Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedUInt64Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedUInt64Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated uint64 data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedUInt64Meta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedSInt32Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedSInt32Meta) */ {
 public:
  RepeatedSInt32Meta();
  virtual ~RepeatedSInt32Meta();

  RepeatedSInt32Meta(const RepeatedSInt32Meta& from);
  RepeatedSInt32Meta(RepeatedSInt32Meta&& from) noexcept
    : RepeatedSInt32Meta() {
    *this = ::std::move(from);
  }

  inline RepeatedSInt32Meta& operator=(const RepeatedSInt32Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedSInt32Meta& operator=(RepeatedSInt32Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedSInt32Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedSInt32Meta* internal_default_instance() {
    return reinterpret_cast<const RepeatedSInt32Meta*>(
               &_RepeatedSInt32Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RepeatedSInt32Meta& a, RepeatedSInt32Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedSInt32Meta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedSInt32Meta* New() const final {
    return CreateMaybeMessage<RepeatedSInt32Meta>(nullptr);
  }

  RepeatedSInt32Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedSInt32Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedSInt32Meta& from);
  void MergeFrom(const RepeatedSInt32Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedSInt32Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedSInt32Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated sint32 data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedSInt32Meta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class RepeatedUInt32Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.RepeatedUInt32Meta) */ {
 public:
  RepeatedUInt32Meta();
  virtual ~RepeatedUInt32Meta();

  RepeatedUInt32Meta(const RepeatedUInt32Meta& from);
  RepeatedUInt32Meta(RepeatedUInt32Meta&& from) noexcept
    : RepeatedUInt32Meta() {
    *this = ::std::move(from);
  }

  inline RepeatedUInt32Meta& operator=(const RepeatedUInt32Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedUInt32Meta& operator=(RepeatedUInt32Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedUInt32Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedUInt32Meta* internal_default_instance() {
    return reinterpret_cast<const RepeatedUInt32Meta*>(
               &_RepeatedUInt32Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RepeatedUInt32Meta& a, RepeatedUInt32Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedUInt32Meta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedUInt32Meta* New() const final {
    return CreateMaybeMessage<RepeatedUInt32Meta>(nullptr);
  }

  RepeatedUInt32Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedUInt32Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedUInt32Meta& from);
  void MergeFrom(const RepeatedUInt32Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedUInt32Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.RepeatedUInt32Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated uint32 data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.RepeatedUInt32Meta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// -------------------------------------------------------------------

class MetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartRedisProtobuf.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartRedisProtobuf.MetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smartredis_2eproto);
    return ::descriptor_table_smartredis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedStringMetaFieldNumber = 1,
    kRepeatedDoubleMetaFieldNumber = 2,
    kRepeatedFloatMetaFieldNumber = 3,
    kRepeatedSint64MetaFieldNumber = 4,
    kRepeatedUint64MetaFieldNumber = 5,
    kRepeatedSint32MetaFieldNumber = 6,
    kRepeatedUint32MetaFieldNumber = 7,
  };
  // repeated .SmartRedisProtobuf.RepeatedStringMeta repeated_string_meta = 1;
  int repeated_string_meta_size() const;
  private:
  int _internal_repeated_string_meta_size() const;
  public:
  void clear_repeated_string_meta();
  ::SmartRedisProtobuf::RepeatedStringMeta* mutable_repeated_string_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedStringMeta >*
      mutable_repeated_string_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedStringMeta& _internal_repeated_string_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedStringMeta* _internal_add_repeated_string_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedStringMeta& repeated_string_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedStringMeta* add_repeated_string_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedStringMeta >&
      repeated_string_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedDoubleMeta repeated_double_meta = 2;
  int repeated_double_meta_size() const;
  private:
  int _internal_repeated_double_meta_size() const;
  public:
  void clear_repeated_double_meta();
  ::SmartRedisProtobuf::RepeatedDoubleMeta* mutable_repeated_double_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedDoubleMeta >*
      mutable_repeated_double_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedDoubleMeta& _internal_repeated_double_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedDoubleMeta* _internal_add_repeated_double_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedDoubleMeta& repeated_double_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedDoubleMeta* add_repeated_double_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedDoubleMeta >&
      repeated_double_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedFloatMeta repeated_float_meta = 3;
  int repeated_float_meta_size() const;
  private:
  int _internal_repeated_float_meta_size() const;
  public:
  void clear_repeated_float_meta();
  ::SmartRedisProtobuf::RepeatedFloatMeta* mutable_repeated_float_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedFloatMeta >*
      mutable_repeated_float_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedFloatMeta& _internal_repeated_float_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedFloatMeta* _internal_add_repeated_float_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedFloatMeta& repeated_float_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedFloatMeta* add_repeated_float_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedFloatMeta >&
      repeated_float_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedSInt64Meta repeated_sint64_meta = 4;
  int repeated_sint64_meta_size() const;
  private:
  int _internal_repeated_sint64_meta_size() const;
  public:
  void clear_repeated_sint64_meta();
  ::SmartRedisProtobuf::RepeatedSInt64Meta* mutable_repeated_sint64_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt64Meta >*
      mutable_repeated_sint64_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedSInt64Meta& _internal_repeated_sint64_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedSInt64Meta* _internal_add_repeated_sint64_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedSInt64Meta& repeated_sint64_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedSInt64Meta* add_repeated_sint64_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt64Meta >&
      repeated_sint64_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedUInt64Meta repeated_uint64_meta = 5;
  int repeated_uint64_meta_size() const;
  private:
  int _internal_repeated_uint64_meta_size() const;
  public:
  void clear_repeated_uint64_meta();
  ::SmartRedisProtobuf::RepeatedUInt64Meta* mutable_repeated_uint64_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt64Meta >*
      mutable_repeated_uint64_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedUInt64Meta& _internal_repeated_uint64_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedUInt64Meta* _internal_add_repeated_uint64_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedUInt64Meta& repeated_uint64_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedUInt64Meta* add_repeated_uint64_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt64Meta >&
      repeated_uint64_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedSInt32Meta repeated_sint32_meta = 6;
  int repeated_sint32_meta_size() const;
  private:
  int _internal_repeated_sint32_meta_size() const;
  public:
  void clear_repeated_sint32_meta();
  ::SmartRedisProtobuf::RepeatedSInt32Meta* mutable_repeated_sint32_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt32Meta >*
      mutable_repeated_sint32_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedSInt32Meta& _internal_repeated_sint32_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedSInt32Meta* _internal_add_repeated_sint32_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedSInt32Meta& repeated_sint32_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedSInt32Meta* add_repeated_sint32_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt32Meta >&
      repeated_sint32_meta() const;

  // repeated .SmartRedisProtobuf.RepeatedUInt32Meta repeated_uint32_meta = 7;
  int repeated_uint32_meta_size() const;
  private:
  int _internal_repeated_uint32_meta_size() const;
  public:
  void clear_repeated_uint32_meta();
  ::SmartRedisProtobuf::RepeatedUInt32Meta* mutable_repeated_uint32_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt32Meta >*
      mutable_repeated_uint32_meta();
  private:
  const ::SmartRedisProtobuf::RepeatedUInt32Meta& _internal_repeated_uint32_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedUInt32Meta* _internal_add_repeated_uint32_meta();
  public:
  const ::SmartRedisProtobuf::RepeatedUInt32Meta& repeated_uint32_meta(int index) const;
  ::SmartRedisProtobuf::RepeatedUInt32Meta* add_repeated_uint32_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt32Meta >&
      repeated_uint32_meta() const;

  // @@protoc_insertion_point(class_scope:SmartRedisProtobuf.MetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedStringMeta > repeated_string_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedDoubleMeta > repeated_double_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedFloatMeta > repeated_float_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt64Meta > repeated_sint64_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt64Meta > repeated_uint64_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt32Meta > repeated_sint32_meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt32Meta > repeated_uint32_meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartredis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RepeatedStringMeta

// string id = 1;
inline void RepeatedStringMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedStringMeta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedStringMeta.id)
  return _internal_id();
}
inline void RepeatedStringMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedStringMeta.id)
}
inline std::string* RepeatedStringMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedStringMeta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedStringMeta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedStringMeta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedStringMeta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedStringMeta.id)
}
inline void RepeatedStringMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedStringMeta.id)
}
inline void RepeatedStringMeta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedStringMeta.id)
}
inline std::string* RepeatedStringMeta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedStringMeta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedStringMeta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedStringMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedStringMeta.id)
}

// repeated string data = 2;
inline int RepeatedStringMeta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedStringMeta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedStringMeta::clear_data() {
  data_.Clear();
}
inline std::string* RepeatedStringMeta::add_data() {
  // @@protoc_insertion_point(field_add_mutable:SmartRedisProtobuf.RepeatedStringMeta.data)
  return _internal_add_data();
}
inline const std::string& RepeatedStringMeta::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& RepeatedStringMeta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedStringMeta.data)
  return _internal_data(index);
}
inline std::string* RepeatedStringMeta::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedStringMeta.data)
  return data_.Mutable(index);
}
inline void RepeatedStringMeta::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedStringMeta.data)
  data_.Mutable(index)->assign(value);
}
inline void RepeatedStringMeta::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedStringMeta.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void RepeatedStringMeta::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline void RepeatedStringMeta::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline std::string* RepeatedStringMeta::_internal_add_data() {
  return data_.Add();
}
inline void RepeatedStringMeta::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline void RepeatedStringMeta::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline void RepeatedStringMeta::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline void RepeatedStringMeta::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartRedisProtobuf.RepeatedStringMeta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RepeatedStringMeta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedStringMeta.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RepeatedStringMeta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedStringMeta.data)
  return &data_;
}

// -------------------------------------------------------------------

// RepeatedDoubleMeta

// string id = 1;
inline void RepeatedDoubleMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedDoubleMeta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedDoubleMeta.id)
  return _internal_id();
}
inline void RepeatedDoubleMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedDoubleMeta.id)
}
inline std::string* RepeatedDoubleMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedDoubleMeta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedDoubleMeta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedDoubleMeta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedDoubleMeta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedDoubleMeta.id)
}
inline void RepeatedDoubleMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedDoubleMeta.id)
}
inline void RepeatedDoubleMeta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedDoubleMeta.id)
}
inline std::string* RepeatedDoubleMeta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedDoubleMeta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedDoubleMeta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedDoubleMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedDoubleMeta.id)
}

// repeated double data = 2 [packed = true];
inline int RepeatedDoubleMeta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedDoubleMeta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedDoubleMeta::clear_data() {
  data_.Clear();
}
inline double RepeatedDoubleMeta::_internal_data(int index) const {
  return data_.Get(index);
}
inline double RepeatedDoubleMeta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedDoubleMeta.data)
  return _internal_data(index);
}
inline void RepeatedDoubleMeta::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedDoubleMeta.data)
}
inline void RepeatedDoubleMeta::_internal_add_data(double value) {
  data_.Add(value);
}
inline void RepeatedDoubleMeta::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedDoubleMeta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RepeatedDoubleMeta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RepeatedDoubleMeta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedDoubleMeta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RepeatedDoubleMeta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RepeatedDoubleMeta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedDoubleMeta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RepeatedFloatMeta

// string id = 1;
inline void RepeatedFloatMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedFloatMeta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedFloatMeta.id)
  return _internal_id();
}
inline void RepeatedFloatMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedFloatMeta.id)
}
inline std::string* RepeatedFloatMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedFloatMeta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedFloatMeta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedFloatMeta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedFloatMeta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedFloatMeta.id)
}
inline void RepeatedFloatMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedFloatMeta.id)
}
inline void RepeatedFloatMeta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedFloatMeta.id)
}
inline std::string* RepeatedFloatMeta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedFloatMeta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedFloatMeta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedFloatMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedFloatMeta.id)
}

// repeated float data = 2 [packed = true];
inline int RepeatedFloatMeta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedFloatMeta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedFloatMeta::clear_data() {
  data_.Clear();
}
inline float RepeatedFloatMeta::_internal_data(int index) const {
  return data_.Get(index);
}
inline float RepeatedFloatMeta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedFloatMeta.data)
  return _internal_data(index);
}
inline void RepeatedFloatMeta::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedFloatMeta.data)
}
inline void RepeatedFloatMeta::_internal_add_data(float value) {
  data_.Add(value);
}
inline void RepeatedFloatMeta::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedFloatMeta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RepeatedFloatMeta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RepeatedFloatMeta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedFloatMeta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RepeatedFloatMeta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RepeatedFloatMeta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedFloatMeta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RepeatedSInt64Meta

// string id = 1;
inline void RepeatedSInt64Meta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedSInt64Meta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedSInt64Meta.id)
  return _internal_id();
}
inline void RepeatedSInt64Meta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedSInt64Meta.id)
}
inline std::string* RepeatedSInt64Meta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedSInt64Meta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedSInt64Meta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedSInt64Meta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedSInt64Meta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedSInt64Meta.id)
}
inline void RepeatedSInt64Meta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedSInt64Meta.id)
}
inline void RepeatedSInt64Meta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedSInt64Meta.id)
}
inline std::string* RepeatedSInt64Meta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedSInt64Meta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedSInt64Meta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedSInt64Meta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedSInt64Meta.id)
}

// repeated sint64 data = 2 [packed = true];
inline int RepeatedSInt64Meta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedSInt64Meta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedSInt64Meta::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RepeatedSInt64Meta::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RepeatedSInt64Meta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedSInt64Meta.data)
  return _internal_data(index);
}
inline void RepeatedSInt64Meta::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedSInt64Meta.data)
}
inline void RepeatedSInt64Meta::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Add(value);
}
inline void RepeatedSInt64Meta::add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedSInt64Meta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RepeatedSInt64Meta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RepeatedSInt64Meta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedSInt64Meta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RepeatedSInt64Meta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RepeatedSInt64Meta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedSInt64Meta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RepeatedUInt64Meta

// string id = 1;
inline void RepeatedUInt64Meta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedUInt64Meta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedUInt64Meta.id)
  return _internal_id();
}
inline void RepeatedUInt64Meta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedUInt64Meta.id)
}
inline std::string* RepeatedUInt64Meta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedUInt64Meta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedUInt64Meta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedUInt64Meta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedUInt64Meta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedUInt64Meta.id)
}
inline void RepeatedUInt64Meta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedUInt64Meta.id)
}
inline void RepeatedUInt64Meta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedUInt64Meta.id)
}
inline std::string* RepeatedUInt64Meta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedUInt64Meta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedUInt64Meta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedUInt64Meta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedUInt64Meta.id)
}

// repeated uint64 data = 2 [packed = true];
inline int RepeatedUInt64Meta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedUInt64Meta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedUInt64Meta::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedUInt64Meta::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedUInt64Meta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedUInt64Meta.data)
  return _internal_data(index);
}
inline void RepeatedUInt64Meta::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedUInt64Meta.data)
}
inline void RepeatedUInt64Meta::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  data_.Add(value);
}
inline void RepeatedUInt64Meta::add_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedUInt64Meta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RepeatedUInt64Meta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RepeatedUInt64Meta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedUInt64Meta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RepeatedUInt64Meta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RepeatedUInt64Meta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedUInt64Meta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RepeatedSInt32Meta

// string id = 1;
inline void RepeatedSInt32Meta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedSInt32Meta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedSInt32Meta.id)
  return _internal_id();
}
inline void RepeatedSInt32Meta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedSInt32Meta.id)
}
inline std::string* RepeatedSInt32Meta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedSInt32Meta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedSInt32Meta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedSInt32Meta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedSInt32Meta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedSInt32Meta.id)
}
inline void RepeatedSInt32Meta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedSInt32Meta.id)
}
inline void RepeatedSInt32Meta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedSInt32Meta.id)
}
inline std::string* RepeatedSInt32Meta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedSInt32Meta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedSInt32Meta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedSInt32Meta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedSInt32Meta.id)
}

// repeated sint32 data = 2 [packed = true];
inline int RepeatedSInt32Meta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedSInt32Meta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedSInt32Meta::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepeatedSInt32Meta::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepeatedSInt32Meta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedSInt32Meta.data)
  return _internal_data(index);
}
inline void RepeatedSInt32Meta::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedSInt32Meta.data)
}
inline void RepeatedSInt32Meta::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void RepeatedSInt32Meta::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedSInt32Meta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RepeatedSInt32Meta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RepeatedSInt32Meta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedSInt32Meta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RepeatedSInt32Meta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RepeatedSInt32Meta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedSInt32Meta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// RepeatedUInt32Meta

// string id = 1;
inline void RepeatedUInt32Meta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedUInt32Meta::id() const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedUInt32Meta.id)
  return _internal_id();
}
inline void RepeatedUInt32Meta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedUInt32Meta.id)
}
inline std::string* RepeatedUInt32Meta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.RepeatedUInt32Meta.id)
  return _internal_mutable_id();
}
inline const std::string& RepeatedUInt32Meta::_internal_id() const {
  return id_.GetNoArena();
}
inline void RepeatedUInt32Meta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedUInt32Meta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SmartRedisProtobuf.RepeatedUInt32Meta.id)
}
inline void RepeatedUInt32Meta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SmartRedisProtobuf.RepeatedUInt32Meta.id)
}
inline void RepeatedUInt32Meta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SmartRedisProtobuf.RepeatedUInt32Meta.id)
}
inline std::string* RepeatedUInt32Meta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedUInt32Meta::release_id() {
  // @@protoc_insertion_point(field_release:SmartRedisProtobuf.RepeatedUInt32Meta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedUInt32Meta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SmartRedisProtobuf.RepeatedUInt32Meta.id)
}

// repeated uint32 data = 2 [packed = true];
inline int RepeatedUInt32Meta::_internal_data_size() const {
  return data_.size();
}
inline int RepeatedUInt32Meta::data_size() const {
  return _internal_data_size();
}
inline void RepeatedUInt32Meta::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RepeatedUInt32Meta::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RepeatedUInt32Meta::data(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.RepeatedUInt32Meta.data)
  return _internal_data(index);
}
inline void RepeatedUInt32Meta::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartRedisProtobuf.RepeatedUInt32Meta.data)
}
inline void RepeatedUInt32Meta::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void RepeatedUInt32Meta::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.RepeatedUInt32Meta.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RepeatedUInt32Meta::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RepeatedUInt32Meta::data() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.RepeatedUInt32Meta.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RepeatedUInt32Meta::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RepeatedUInt32Meta::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.RepeatedUInt32Meta.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// MetaData

// repeated .SmartRedisProtobuf.RepeatedStringMeta repeated_string_meta = 1;
inline int MetaData::_internal_repeated_string_meta_size() const {
  return repeated_string_meta_.size();
}
inline int MetaData::repeated_string_meta_size() const {
  return _internal_repeated_string_meta_size();
}
inline void MetaData::clear_repeated_string_meta() {
  repeated_string_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedStringMeta* MetaData::mutable_repeated_string_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_string_meta)
  return repeated_string_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedStringMeta >*
MetaData::mutable_repeated_string_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_string_meta)
  return &repeated_string_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedStringMeta& MetaData::_internal_repeated_string_meta(int index) const {
  return repeated_string_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedStringMeta& MetaData::repeated_string_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_string_meta)
  return _internal_repeated_string_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedStringMeta* MetaData::_internal_add_repeated_string_meta() {
  return repeated_string_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedStringMeta* MetaData::add_repeated_string_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_string_meta)
  return _internal_add_repeated_string_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedStringMeta >&
MetaData::repeated_string_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_string_meta)
  return repeated_string_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedDoubleMeta repeated_double_meta = 2;
inline int MetaData::_internal_repeated_double_meta_size() const {
  return repeated_double_meta_.size();
}
inline int MetaData::repeated_double_meta_size() const {
  return _internal_repeated_double_meta_size();
}
inline void MetaData::clear_repeated_double_meta() {
  repeated_double_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedDoubleMeta* MetaData::mutable_repeated_double_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_double_meta)
  return repeated_double_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedDoubleMeta >*
MetaData::mutable_repeated_double_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_double_meta)
  return &repeated_double_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedDoubleMeta& MetaData::_internal_repeated_double_meta(int index) const {
  return repeated_double_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedDoubleMeta& MetaData::repeated_double_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_double_meta)
  return _internal_repeated_double_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedDoubleMeta* MetaData::_internal_add_repeated_double_meta() {
  return repeated_double_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedDoubleMeta* MetaData::add_repeated_double_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_double_meta)
  return _internal_add_repeated_double_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedDoubleMeta >&
MetaData::repeated_double_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_double_meta)
  return repeated_double_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedFloatMeta repeated_float_meta = 3;
inline int MetaData::_internal_repeated_float_meta_size() const {
  return repeated_float_meta_.size();
}
inline int MetaData::repeated_float_meta_size() const {
  return _internal_repeated_float_meta_size();
}
inline void MetaData::clear_repeated_float_meta() {
  repeated_float_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedFloatMeta* MetaData::mutable_repeated_float_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_float_meta)
  return repeated_float_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedFloatMeta >*
MetaData::mutable_repeated_float_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_float_meta)
  return &repeated_float_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedFloatMeta& MetaData::_internal_repeated_float_meta(int index) const {
  return repeated_float_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedFloatMeta& MetaData::repeated_float_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_float_meta)
  return _internal_repeated_float_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedFloatMeta* MetaData::_internal_add_repeated_float_meta() {
  return repeated_float_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedFloatMeta* MetaData::add_repeated_float_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_float_meta)
  return _internal_add_repeated_float_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedFloatMeta >&
MetaData::repeated_float_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_float_meta)
  return repeated_float_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedSInt64Meta repeated_sint64_meta = 4;
inline int MetaData::_internal_repeated_sint64_meta_size() const {
  return repeated_sint64_meta_.size();
}
inline int MetaData::repeated_sint64_meta_size() const {
  return _internal_repeated_sint64_meta_size();
}
inline void MetaData::clear_repeated_sint64_meta() {
  repeated_sint64_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedSInt64Meta* MetaData::mutable_repeated_sint64_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_sint64_meta)
  return repeated_sint64_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt64Meta >*
MetaData::mutable_repeated_sint64_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_sint64_meta)
  return &repeated_sint64_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedSInt64Meta& MetaData::_internal_repeated_sint64_meta(int index) const {
  return repeated_sint64_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedSInt64Meta& MetaData::repeated_sint64_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_sint64_meta)
  return _internal_repeated_sint64_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedSInt64Meta* MetaData::_internal_add_repeated_sint64_meta() {
  return repeated_sint64_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedSInt64Meta* MetaData::add_repeated_sint64_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_sint64_meta)
  return _internal_add_repeated_sint64_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt64Meta >&
MetaData::repeated_sint64_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_sint64_meta)
  return repeated_sint64_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedUInt64Meta repeated_uint64_meta = 5;
inline int MetaData::_internal_repeated_uint64_meta_size() const {
  return repeated_uint64_meta_.size();
}
inline int MetaData::repeated_uint64_meta_size() const {
  return _internal_repeated_uint64_meta_size();
}
inline void MetaData::clear_repeated_uint64_meta() {
  repeated_uint64_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedUInt64Meta* MetaData::mutable_repeated_uint64_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_uint64_meta)
  return repeated_uint64_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt64Meta >*
MetaData::mutable_repeated_uint64_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_uint64_meta)
  return &repeated_uint64_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedUInt64Meta& MetaData::_internal_repeated_uint64_meta(int index) const {
  return repeated_uint64_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedUInt64Meta& MetaData::repeated_uint64_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_uint64_meta)
  return _internal_repeated_uint64_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedUInt64Meta* MetaData::_internal_add_repeated_uint64_meta() {
  return repeated_uint64_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedUInt64Meta* MetaData::add_repeated_uint64_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_uint64_meta)
  return _internal_add_repeated_uint64_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt64Meta >&
MetaData::repeated_uint64_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_uint64_meta)
  return repeated_uint64_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedSInt32Meta repeated_sint32_meta = 6;
inline int MetaData::_internal_repeated_sint32_meta_size() const {
  return repeated_sint32_meta_.size();
}
inline int MetaData::repeated_sint32_meta_size() const {
  return _internal_repeated_sint32_meta_size();
}
inline void MetaData::clear_repeated_sint32_meta() {
  repeated_sint32_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedSInt32Meta* MetaData::mutable_repeated_sint32_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_sint32_meta)
  return repeated_sint32_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt32Meta >*
MetaData::mutable_repeated_sint32_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_sint32_meta)
  return &repeated_sint32_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedSInt32Meta& MetaData::_internal_repeated_sint32_meta(int index) const {
  return repeated_sint32_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedSInt32Meta& MetaData::repeated_sint32_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_sint32_meta)
  return _internal_repeated_sint32_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedSInt32Meta* MetaData::_internal_add_repeated_sint32_meta() {
  return repeated_sint32_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedSInt32Meta* MetaData::add_repeated_sint32_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_sint32_meta)
  return _internal_add_repeated_sint32_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedSInt32Meta >&
MetaData::repeated_sint32_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_sint32_meta)
  return repeated_sint32_meta_;
}

// repeated .SmartRedisProtobuf.RepeatedUInt32Meta repeated_uint32_meta = 7;
inline int MetaData::_internal_repeated_uint32_meta_size() const {
  return repeated_uint32_meta_.size();
}
inline int MetaData::repeated_uint32_meta_size() const {
  return _internal_repeated_uint32_meta_size();
}
inline void MetaData::clear_repeated_uint32_meta() {
  repeated_uint32_meta_.Clear();
}
inline ::SmartRedisProtobuf::RepeatedUInt32Meta* MetaData::mutable_repeated_uint32_meta(int index) {
  // @@protoc_insertion_point(field_mutable:SmartRedisProtobuf.MetaData.repeated_uint32_meta)
  return repeated_uint32_meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt32Meta >*
MetaData::mutable_repeated_uint32_meta() {
  // @@protoc_insertion_point(field_mutable_list:SmartRedisProtobuf.MetaData.repeated_uint32_meta)
  return &repeated_uint32_meta_;
}
inline const ::SmartRedisProtobuf::RepeatedUInt32Meta& MetaData::_internal_repeated_uint32_meta(int index) const {
  return repeated_uint32_meta_.Get(index);
}
inline const ::SmartRedisProtobuf::RepeatedUInt32Meta& MetaData::repeated_uint32_meta(int index) const {
  // @@protoc_insertion_point(field_get:SmartRedisProtobuf.MetaData.repeated_uint32_meta)
  return _internal_repeated_uint32_meta(index);
}
inline ::SmartRedisProtobuf::RepeatedUInt32Meta* MetaData::_internal_add_repeated_uint32_meta() {
  return repeated_uint32_meta_.Add();
}
inline ::SmartRedisProtobuf::RepeatedUInt32Meta* MetaData::add_repeated_uint32_meta() {
  // @@protoc_insertion_point(field_add:SmartRedisProtobuf.MetaData.repeated_uint32_meta)
  return _internal_add_repeated_uint32_meta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartRedisProtobuf::RepeatedUInt32Meta >&
MetaData::repeated_uint32_meta() const {
  // @@protoc_insertion_point(field_list:SmartRedisProtobuf.MetaData.repeated_uint32_meta)
  return repeated_uint32_meta_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartRedisProtobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smartredis_2eproto
